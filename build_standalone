#!/bin/bash

# To configure. 
export PROACTIVEZIPSRC="/home/co/ProActiveScheduling-3.1.2_worker(FUT).zip"
export VERSION="1.0"

# Do not configure.
export CXFREEZEFILE=setup-cf_Freeze.py
export COMMITFILE=VERSION.txt
export PROACTIVEVERSIONFILE=PROACTIVEVERSION.txt
export PROACTIVEDIRBUILD=proactive
export PROACTIVEFILEBUILD=proactive.zip

assertrightdir(){
	# $1 pwd 
	if [ -e "$1/INSTALL.txt" ]
	then
		echo "Right directory. "
	else
		echo "ERROR: please go to the project root directory to run this script."
		exit 1
	fi
}

assertexists(){
	# $1 File
	if [ -e "$1" ]
	then
		echo "File existence checked for: $1"
	else
		echo "ERROR, file does not exist: $1"
		exit 1
	fi
}

assertnotempty(){
	# Assert string is not empty, or print error message 
	if [ "$1" ]
	then
		echo "   Checked value: $1"
	else
		echo "$2"
		exit 1
	fi
}

checkexecutableinpath(){
	# Check if executable $1 is present.
	if [ "$(which $1)" ]
	then
		echo "$1 installed..."
	else
		echo "$1 NOT installed. Please install it to proceed."
		exit 1
	fi
}

putcommit(){
	# $1 commitfile
	# Generate a commit file telling the version used.
	echo `cd $CURRDIR && git log | head -5 | grep commit` > $1
}


set -e 

export CURRDIR=$(dirname $0)
export CURRLINUXDIST=$(cat /etc/issue)
export CURRUNAME=$(uname -a)

echo "Current directory is:          $CURRDIR"
echo "Current Linux distribution is: $CURRLINUXDIST"
echo "Current uname is:              $CURRUNAME"

assertrightdir "$CURRDIR"

checkexecutableinpath "python"
checkexecutableinpath "cxfreeze"

echo "Building cxfreeze project..."
python $CXFREEZEFILE build

BTEMP=$(ls $CURRDIR/build | grep -v zip)
echo "Build path detected: $BTEMP"

BUILDPATH=$CURRDIR/build/$BTEMP
echo "Build path detected: $BUILDPATH"


echo "Checking if libraries were built..."
LIBEXSLT=$(find $CURRDIR -maxdepth 1 -name libexslt.so.0.8.15)

if [ -z $LIBEXSLT ]
then 
	echo "Libraries not built. Building needed libraries..."
	$CURRDIR/build_lxml
else
	echo "   Libraries already built."

fi

LIBEXSLT=$(find $CURRDIR -maxdepth 1 -name libexslt.so.0.8.15)
assertnotempty "$LIBEXSLT" "ERROR: The libraries generated by the script build_lxml were not found."

PATHTOLIBS=$(dirname "$LIBEXSLT")
echo "Libraries generated in $PATHTOLIBS"


echo "Copying libraries in distributable $BUILDPATH ..."
cp $PATHTOLIBS/libexslt.so.0.8.15 $BUILDPATH
ln -fs libexslt.so.0.8.15 $BUILDPATH/libexslt.so
ln -fs libexslt.so.0.8.15 $BUILDPATH/libexslt.so.0
cp $PATHTOLIBS/libxml2.so.2.7.8 $BUILDPATH
ln -fs libxml2.so.2.7.8 $BUILDPATH/libxml2.so
ln -fs libxml2.so.2.7.8 $BUILDPATH/libxml2.so.2
cp $PATHTOLIBS/libxslt.so.1.1.26 $BUILDPATH
ln -fs libxslt.so.1.1.26 $BUILDPATH/libxslt.so
ln -fs libxslt.so.1.1.26 $BUILDPATH/libxslt.so.1

echo "Generating commit file for distributable..."
putcommit "$BUILDPATH/$COMMITFILE"

echo "Copying ProActive in distributable..."
assertexists "$PROACTIVEZIPSRC"
mkdir -p $BUILDPATH/proactive
echo `basename $PROACTIVEZIPSRC` > $BUILDPATH/$PROACTIVEVERSIONFILE
cp -r "$PROACTIVEZIPSRC" "$BUILDPATH/$PROACTIVEDIRBUILD/$PROACTIVEFILEBUILD"

echo "Creating a tar..."
DISTZIP=$CURRDIR/build/paagent-linux-standalone-$VERSION.zip
zip -r $DISTZIP $BUILDPATH

echo "Done."

echo "The distributable zip can be found in: $DISTZIP"
echo "The distributable dir can be found in: $BUILDPATH"
echo "Read README.txt files provided in the distributable to know about their usage."

