#! /bin/sh
### BEGIN INIT INFO
# Provides:          proactive-agent
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ProActive Agent
# Description:       The ProActive Agent enables desktop computers as an important source of computational power.
### END INIT INFO

# Author: Brian Amedro <brian.amedro@activeeon.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="The ProActive Agent enables desktop computers as an important source of computational power"
NAME=proactive-agent
DAEMON=/opt/proactive-agent/$NAME
PIDFILE=/opt/proactive-agent/$NAME.pid
CONFIGFILE=/opt/proactive-agent/config.xml
DAEMON_ARGS="-D -v $CONFIGFILE -p $PIDFILE -L /opt/proactive-agent/$NAME.log"
SCRIPTNAME=/etc/init.d/proactive-agent
PAUSER=proactive

AGENTUSER="proactive"
AGENTGROUP="proactive"
AGENTHOME="/opt/proactive-agent"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# We need this function to ensure the whole process tree will be killed
killtree() {
	local _pid=$1
	local _sig=${2-TERM}
	for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
		killtree ${_child} ${_sig}
	done
	kill -${_sig} ${_pid}
}

# Set USE_CGROUP if cgreate is avaible
type cgcreate >/dev/null 2>&1 && USE_CGROUP=1

cgroup_mount() {
	mkdir -p $AGENTHOME/cgroups
	if [ ! -e $AGENTHOME/cgroups/tasks ] ; then
		mount -t cgroup -o memory proactive-agent $AGENTHOME/cgroups
		cgcreate -t $AGENTUSER:$AGENTGROUP -a $AGENTUSER:$AGENTGROUP -g memory:/proactive-agent
	fi
}

cgroup_umount() {
	  rmdir -- $AGENTHOME/cgroups/proactive-agent
	  umount $AGENTHOME/cgroups
}

#
# Function that starts the daemon/service
#
do_start()
{
	if [ "$USE_CGROUP" = "1" ]; then
		cgroup_mount
	fi

	start-stop-daemon --start --quiet --user $PAUSER --chuid $PAUSER --pidfile $PIDFILE --startas $DAEMON -- $DAEMON_ARGS
}

#
# Function that stops the daemon/service
#
do_stop()
{
	if [ "$USE_CGROUP" = "1" ] ; then
		cgroup_umount
	fi

	# kill the tree first
	if [ -f $PIDFILE ]; then
		PID=$(cat $PIDFILE)
		while test -d /proc/$PID; do
			killtree $PID 9
			sleep 0.5
		done
	fi

	# kill all remaining processes of the user
	start-stop-daemon --stop --quiet --user $PAUSER --oknodo --retry=TERM/10/KILL/5
	[ "$?" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
